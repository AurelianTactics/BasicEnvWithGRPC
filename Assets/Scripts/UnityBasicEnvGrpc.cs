// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: unity_basic_env.proto
// </auto-generated>
// Original file comments:
// test protos
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Unitybasicenv {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class UnityBasicEnv
  {
    static readonly string __ServiceName = "unitybasicenv.UnityBasicEnv";

    static readonly grpc::Marshaller<global::Unitybasicenv.UnityBasicEnvNote> __Marshaller_unitybasicenv_UnityBasicEnvNote = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Unitybasicenv.UnityBasicEnvNote.Parser.ParseFrom);

    static readonly grpc::Method<global::Unitybasicenv.UnityBasicEnvNote, global::Unitybasicenv.UnityBasicEnvNote> __Method_UnityBasicEnvChat = new grpc::Method<global::Unitybasicenv.UnityBasicEnvNote, global::Unitybasicenv.UnityBasicEnvNote>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "UnityBasicEnvChat",
        __Marshaller_unitybasicenv_UnityBasicEnvNote,
        __Marshaller_unitybasicenv_UnityBasicEnvNote);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Unitybasicenv.UnityBasicEnvReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UnityBasicEnv</summary>
    [grpc::BindServiceMethod(typeof(UnityBasicEnv), "BindService")]
    public abstract partial class UnityBasicEnvBase
    {
      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of UnityBasicEnvNote sent while a route is being traversed,
      /// while receiving other UnityBasicEnvNote (e.g. from other users).
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task UnityBasicEnvChat(grpc::IAsyncStreamReader<global::Unitybasicenv.UnityBasicEnvNote> requestStream, grpc::IServerStreamWriter<global::Unitybasicenv.UnityBasicEnvNote> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UnityBasicEnv</summary>
    public partial class UnityBasicEnvClient : grpc::ClientBase<UnityBasicEnvClient>
    {
      /// <summary>Creates a new client for UnityBasicEnv</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UnityBasicEnvClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UnityBasicEnv that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UnityBasicEnvClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UnityBasicEnvClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UnityBasicEnvClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of UnityBasicEnvNote sent while a route is being traversed,
      /// while receiving other UnityBasicEnvNote (e.g. from other users).
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Unitybasicenv.UnityBasicEnvNote, global::Unitybasicenv.UnityBasicEnvNote> UnityBasicEnvChat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnityBasicEnvChat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A Bidirectional streaming RPC.
      ///
      /// Accepts a stream of UnityBasicEnvNote sent while a route is being traversed,
      /// while receiving other UnityBasicEnvNote (e.g. from other users).
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Unitybasicenv.UnityBasicEnvNote, global::Unitybasicenv.UnityBasicEnvNote> UnityBasicEnvChat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_UnityBasicEnvChat, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UnityBasicEnvClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UnityBasicEnvClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UnityBasicEnvBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UnityBasicEnvChat, serviceImpl.UnityBasicEnvChat).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UnityBasicEnvBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UnityBasicEnvChat, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Unitybasicenv.UnityBasicEnvNote, global::Unitybasicenv.UnityBasicEnvNote>(serviceImpl.UnityBasicEnvChat));
    }

  }
}
#endregion
